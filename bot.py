import asyncio
import json
import os
import subprocess
import logging
import pymorphy3
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    Filters,
    CallbackContext,
)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö) –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
MAX_BUTTON_TEXT_LENGTH = 100

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª .env")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
if not os.getenv("BOT_TOKEN"):
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è PythonAnywhere.")

# –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
ENABLE_PHOTOS = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GUIDE_QUESTION, GUIDE_ANSWER, GUIDE_ANSWER_PHOTOS = range(3)
GUIDE_EDIT_QUESTION, GUIDE_EDIT_FIELD, GUIDE_EDIT_VALUE = range(3, 6)
TEMPLATE_QUESTION, TEMPLATE_ANSWER, TEMPLATE_ANSWER_PHOTOS = range(6, 9)
TEMPLATE_EDIT_QUESTION, TEMPLATE_EDIT_FIELD, TEMPLATE_EDIT_VALUE = range(9, 12)

# –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"), KeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ß—Ç–µ–Ω–∏–µ JSON
def load_data(data_type: str):
    file_name = 'guide.json' if data_type == 'guide' else 'templates.json'
    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            data = json.load(f)
            key = 'questions' if data_type == 'guide' else 'templates'
            return data if key in data else {key: []}
    except FileNotFoundError:
        logger.warning(f"{file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ {data_type}")
        return {"questions" if data_type == 'guide' else "templates": []}

def load_guide():
    return load_data('guide')

def load_templates():
    return load_data('template')

# –ß—Ç–µ–Ω–∏–µ user_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_users():
    users_str = os.getenv("ALLOWED_USERS", "")
    logger.info(f"Raw ALLOWED_USERS: '{users_str}'")
    if not users_str:
        logger.warning("ALLOWED_USERS –ø—É—Å—Ç")
        return []
    try:
        users = [int(user_id) for user_id in users_str.split(",") if user_id.strip()]
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
        return users
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ALLOWED_USERS: {e}")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub
def save_data(data_type: str, data):
    file_name = 'guide.json' if data_type == 'guide' else 'templates.json'
    with open(file_name, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    sync_with_github()

def save_guide(data):
    save_data('guide', data)

def save_templates(data):
    save_data('template', data)

def sync_with_github(data_type: str = None):
    try:
        result = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True)
        if not result.stdout:
            logger.info("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return
        subprocess.run(["git", "add", "."], check=True)
        commit_message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {data_type}.json —á–µ—Ä–µ–∑ –±–æ—Ç" if data_type else "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç"
        subprocess.run(["git", "commit", "-m", commit_message], check=True)
        subprocess.run(["git", "pull", "--rebase"], check=True)
        subprocess.run(["git", "push", "origin", "main"], check=True)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã JSON —Ñ–∞–π–ª—ã —Å GitHub ({data_type or '–≤—Å–µ —Ñ–∞–π–ª—ã'})")
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Git: {e}")
        try:
            subprocess.run(["git", "rebase", "--abort"], check=True)
            subprocess.run(["git", "pull", "--no-rebase"], check=True)
            subprocess.run(["git", "push", "origin", "main"], check=True)
            logger.info("–†–∞–∑—Ä–µ—à–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç git –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã JSON —Ñ–∞–π–ª—ã")
        except subprocess.CalledProcessError as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç git: {e2}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å git: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def restrict_access(func):
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user = update.effective_user
        user_id = user.id
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–æ–≤
        user_display = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip() or f"ID {user_id}"
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} (ID: {user_id})")
        users = load_users()
        logger.info(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
        if user_id not in users:
            error_msg = "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            if update.message:
                update.message.reply_text(error_msg, reply_markup=MAIN_MENU)
            elif update.callback_query:
                update.callback_query.message.reply_text(error_msg, reply_markup=MAIN_MENU)
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_display} (ID: {user_id})")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ context.user_data –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        context.user_data['user_display'] = user_display
        return func(update, context, *args, **kwargs)
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {context.error}", exc_info=True)
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {context.user_data.get('conversation_state', 'NONE')}")
    context.user_data.clear()
    context.user_data['conversation_state'] = 'ERROR'
    context.user_data['conversation_active'] = False
    if update.message:
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=MAIN_MENU
        )
    elif update.callback_query:
        update.callback_query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=MAIN_MENU
        )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /start
@restrict_access
def start(update: Update, context: CallbackContext):
    user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç")
    context.user_data.clear()
    context.user_data['conversation_state'] = 'START'
    context.user_data['conversation_active'] = False
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–≠–°–¢! üìã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel
@restrict_access
def cancel(update: Update, context: CallbackContext):
    user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥")
    if context.user_data.get('timeout_task'):
        context.user_data['timeout_task'].cancel()
        context.user_data['timeout_task'] = None
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞")
    context.user_data.clear()
    context.user_data['conversation_state'] = 'CANCELLED'
    context.user_data['conversation_active'] = False
    update.message.reply_text(
        "üö™ –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU
    )
    return ConversationHandler.END

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
@restrict_access
def open_guide(update: Update, context: CallbackContext):
    user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –æ—Ç–∫—Ä—ã–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update.message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {e}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id
    context.job_queue.run_once(
        lambda ctx: clear_chat(ctx, chat_id, message_id, user_display),
        0,
        context=None
    )
    context.user_data.clear()
    context.user_data['conversation_state'] = 'OPEN_GUIDE'
    context.user_data['conversation_active'] = False
    context.user_data['data_type'] = 'guide'
    guide = load_guide()
    if not guide["questions"]:
        update.message.reply_text(
            "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç! ‚ûï",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END
    page = context.user_data.get('page', 0)
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Ä–∞–∑—É
    display_guide_page(update, context, guide, page, 'guide')
    return ConversationHandler.END

# –û—Ç–∫—Ä—ã—Ç–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
@restrict_access
def open_templates(update: Update, context: CallbackContext):
    user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –æ—Ç–∫—Ä—ã–ª —à–∞–±–ª–æ–Ω—ã")
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update.message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {e}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id
    context.job_queue.run_once(
        lambda ctx: clear_chat(ctx, chat_id, message_id, user_display),
        0,
        context=None
    )
    context.user_data.clear()
    context.user_data['conversation_state'] = 'OPEN_TEMPLATE'
    context.user_data['conversation_active'] = False
    context.user_data['data_type'] = 'template'
    templates = load_templates()
    if not templates["templates"]:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data='add_template')],
            [InlineKeyboardButton("üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='cancel_template')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω!",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    page = context.user_data.get('page', 0)
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å—Ä–∞–∑—É
    display_template_page(update, context, templates, page)
    return ConversationHandler.END

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
def display_guide_page(update: Update, context: CallbackContext, data, page, data_type: str):
    try:
        ITEMS_PER_PAGE = 15
        total_items = len(data["questions"])
        total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        page = max(0, min(page, total_pages - 1))
        context.user_data['page'] = page
        context.user_data['data'] = data
        context.user_data['data_type'] = data_type

        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, total_items)
        items = data["questions"][start_idx:end_idx]

        keyboard = []
        for item in items:
            if not isinstance(item, dict) or "question" not in item or "id" not in item:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {item}")
                continue
            question_text = item["question"][:50] if len(item["question"]) > 50 else item["question"]
            padded_text = f"üìÑ {question_text}" + "." * (MAX_BUTTON_TEXT_LENGTH - len(f"üìÑ {question_text}"))
            logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: '{padded_text}' (–¥–ª–∏–Ω–∞: {len(padded_text)})")
            keyboard.append([InlineKeyboardButton(padded_text, callback_data=f'{data_type}_question_{item["id"]}')])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'{data_type}_page_{page-1}'))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f'{data_type}_page_{page+1}'))
        keyboard.append(nav_buttons)

        inline_reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"

        if update.message:
            update.message.reply_text(
                text,
                reply_markup=inline_reply_markup,  # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                reply_to_message_id=None
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç", reply_markup=MAIN_MENU)
        elif update.callback_query:
            update.callback_query.message.edit_text(
                text,
                reply_markup=inline_reply_markup  # –¢–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            )

        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {page + 1}")
        context.user_data['conversation_state'] = f'{data_type.upper()}_PAGE'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    except Exception as e:
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ display_guide_page –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        if update.message:
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=MAIN_MENU
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=MAIN_MENU
            )
        return ConversationHandler.END

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —à–∞–±–ª–æ–Ω–æ–≤
def display_template_page(update: Update, context: CallbackContext, data, page):
    try:
        ITEMS_PER_PAGE = 15
        total_items = len(data["templates"])
        total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        page = max(0, min(page, total_pages - 1))
        context.user_data['page'] = page
        context.user_data['data'] = data
        context.user_data['data_type'] = 'template'

        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, total_items)
        items = data["templates"][start_idx:end_idx]

        keyboard = []
        for item in items:
            if not isinstance(item, dict) or "question" not in item or "id" not in item:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞: {item}")
                continue
            question_text = item["question"][:50] if len(item["question"]) > 50 else item["question"]
            padded_text = f"üìÑ {question_text}" + "." * (MAX_BUTTON_TEXT_LENGTH - len(f"üìÑ {question_text}"))
            logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —à–∞–±–ª–æ–Ω–∞: '{padded_text}' (–¥–ª–∏–Ω–∞: {len(padded_text)})")
            keyboard.append([InlineKeyboardButton(padded_text, callback_data=f'template_question_{item["id"]}')])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'template_page_{page-1}'))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f'template_page_{page+1}'))
        nav_buttons.extend([
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data='add_template'),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data='edit_template'),
            InlineKeyboardButton("üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='cancel_template')
        ])
        keyboard.append(nav_buttons)

        inline_reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"

        if update.message:
            update.message.reply_text(
                text,
                reply_markup=inline_reply_markup,  # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                reply_to_message_id=None
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç", reply_markup=MAIN_MENU)
        elif update.callback_query:
            update.callback_query.message.edit_text(
                text,
                reply_markup=inline_reply_markup  # –¢–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            )

        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–∞–±–ª–æ–Ω–æ–≤ {page + 1}")
        context.user_data['conversation_state'] = 'TEMPLATE_PAGE'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    except Exception as e:
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ display_template_page –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        if update.message:
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=MAIN_MENU
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=MAIN_MENU
            )
        return ConversationHandler.END



@restrict_access
def show_answer(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        data_type, _, question_id = query.data.split('_', 2)
        question_id = int(question_id)
        data = load_data(data_type)
        key = 'questions' if data_type == 'guide' else 'templates'
        item = next((q for q in data[key] if q["id"] == question_id), None)
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        if not item:
            logger.error(f"–ü—É–Ω–∫—Ç {data_type} —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}")
            query.message.reply_text(
                "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=MAIN_MENU,
                quote=False
            )
            return
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–≤–µ—Ç –¥–ª—è {data_type} ID {question_id}")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        question_text = item.get('question', '–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        answer_text = item.get('answer', '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        text = f"–í–æ–ø—Ä–æ—Å: {question_text}\n–û—Ç–≤–µ—Ç:\n{answer_text}"
        photo_ids = item.get('photos', [])
        doc_ids = item.get('documents', [])
        message_ids = []

        if photo_ids:
            if len(photo_ids) == 1:
                message = query.message.reply_photo(
                    photo=photo_ids[0],
                    caption=text,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{query.message.message_id + 1}')]])
                )
                message_ids.append(message.message_id)
            else:
                media = [InputMediaPhoto(media=pid, caption=text if i == 0 else None) for i, pid in enumerate(photo_ids)]
                messages = query.message.reply_media_group(media=media)
                message_ids.extend([msg.message_id for msg in messages])
                delete_message = query.message.reply_text(
                    "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{",".join(map(str, message_ids))}')]])
                )
                message_ids.append(delete_message.message_id)
        elif doc_ids:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ø–µ—Ä–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è)
            if len(doc_ids) >= 1:
                message = query.message.reply_document(
                    document=doc_ids[0],
                    caption=text
                )
                message_ids.append(message.message_id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                for doc_id in doc_ids[1:]:
                    message = query.message.reply_document(
                        document=doc_id
                    )
                    message_ids.append(message.message_id)
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                delete_message = query.message.reply_text(
                    "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{",".join(map(str, message_ids))}')]])
                )
                message_ids.append(delete_message.message_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(doc_ids)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {data_type} ID {question_id}")
        else:
            message = query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{query.message.message_id + 1}')]])
            )
            message_ids.append(message.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_ids –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['answer_message_ids'] = message_ids
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        context.job_queue.run_once(
            schedule_message_deletion,
            1800,
            context={'message_ids': message_ids, 'chat_id': query.message.chat_id, 'user_display': user_display}
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π {message_ids} —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_answer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@restrict_access
def handle_pagination(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        data_type, _, page = query.data.split('_')
        page = int(page)
        data = context.user_data.get('data', load_data(data_type))
        if data_type == 'guide':
            display_guide_page(update, context, data, page, data_type)
        else:
            display_template_page(update, context, data, page)
        context.user_data['conversation_state'] = f'{data_type.upper()}_PAGINATION'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_pagination –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏
@restrict_access
def handle_template_action(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    action = query.data
    try:
        if action == 'add_template':
            return add_template(update, context)
        elif action == 'edit_template':
            return edit_template(update, context)
        elif action == 'cancel_template':
            context.user_data.clear()
            context.user_data['conversation_state'] = 'CANCEL_TEMPLATE'
            context.user_data['conversation_active'] = False
            query.message.reply_text("üö™ –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
            return ConversationHandler.END
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_template_action –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END

# –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@restrict_access
def perform_search(update: Update, context: CallbackContext):
    if context.user_data.get('conversation_active', False):
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ ({context.user_data.get('conversation_state')}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º perform_search")
        return
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–æ—à–µ–ª –≤ perform_search —Å —Ç–µ–∫—Å—Ç–æ–º: '{update.message.text}'")
        if not update.message or not update.message.text:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞!",
                reply_markup=MAIN_MENU
            )
            return
        keyword = update.message.text.lower().strip()
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'")
        guide = load_guide()
        if not isinstance(guide, dict) or "questions" not in guide or not isinstance(guide["questions"], list):
            logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ guide.json")
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ guide.json. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=MAIN_MENU
            )
            return
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        morph = pymorphy3.MorphAnalyzer()
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        keyword_normalized = morph.parse(keyword)[0].normal_form
        logger.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword_normalized}'")
        results = []
        for q in guide["questions"]:
            if not (isinstance(q, dict) and "question" in q and isinstance(q["question"], str)):
                continue
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–µ
            question_words = [morph.parse(word)[0].normal_form for word in q["question"].lower().split()]
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            answer_words = (
                [morph.parse(word)[0].normal_form for word in q["answer"].lower().split()]
                if q.get("answer") and isinstance(q["answer"], str)
                else []
            )
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            if keyword_normalized in question_words or keyword_normalized in answer_words:
                results.append(q)
        if not results:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            update.message.reply_text(
                "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!",
                reply_markup=MAIN_MENU
            )
            return
        context.user_data['data'] = {"questions": results}
        context.user_data['page'] = 0
        context.user_data['data_type'] = 'guide'
        context.user_data['conversation_state'] = 'SEARCH'
        context.user_data['conversation_active'] = False
        context.user_data['search_query'] = keyword  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{keyword}': {[item['id'] for item in results]}")
        display_guide_page(update, context, {"questions": results}, 0, 'guide')
        return
    except Exception as e:
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ perform_search –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=MAIN_MENU
        )
        return

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
@restrict_access
def add_point(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞")
    context.user_data.clear()
    context.user_data['photos'] = []
    context.user_data['media_group_id'] = None
    context.user_data['last_photo_time'] = None
    context.user_data['point_saved'] = False
    context.user_data['loading_message_id'] = None
    context.user_data['timeout_task'] = None
    context.user_data['conversation_state'] = 'ADD_GUIDE'
    context.user_data['conversation_active'] = True
    context.user_data['data_type'] = 'guide'
    try:
        message = update.message.reply_text(
            "‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É'):\n(–ù–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
            reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
            quote=False
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª add_point")
        return GUIDE_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_point –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@restrict_access
def add_template(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
    context.user_data.clear()
    context.user_data['photos'] = []
    context.user_data['media_group_id'] = None
    context.user_data['last_photo_time'] = None
    context.user_data['point_saved'] = False
    context.user_data['loading_message_id'] = None
    context.user_data['timeout_task'] = None
    context.user_data['conversation_state'] = 'ADD_TEMPLATE'
    context.user_data['conversation_active'] = True
    context.user_data['data_type'] = 'template'
    try:
        if update.message:
            update.message.reply_text(
                "‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å'):\n(–ù–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
                reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
                quote=False
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å'):\n(–ù–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
                reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
                quote=False
            )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª add_template")
        return TEMPLATE_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_template –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        if update.message:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU
            )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@restrict_access
def receive_question(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–æ—à–µ–ª –≤ receive_question, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data.get('conversation_state')}, —Ç–µ–∫—Å—Ç: '{update.message.text}'")
    if not context.user_data.get('conversation_active', False):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ")
        update.message.reply_text(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {'–ø—É–Ω–∫—Ç–∞' if context.user_data.get('data_type') == 'guide' else '—à–∞–±–ª–æ–Ω–∞'} –∑–∞–Ω–æ–≤–æ.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        context.user_data.clear()
        context.user_data['conversation_state'] = 'INVALID_QUESTION'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    data_type = context.user_data.get('data_type', 'guide')
    if data_type not in ['guide', 'template']:
        logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π data_type: {data_type}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        context.user_data.clear()
        context.user_data['conversation_state'] = 'INVALID_DATA_TYPE'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –≤–æ–ø—Ä–æ—Å –¥–ª—è {data_type}: {update.message.text}")
    context.user_data['new_question'] = update.message.text
    context.user_data['conversation_state'] = f'RECEIVE_{data_type.upper()}_QUESTION'
    prompt = "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
    if ENABLE_PHOTOS:
        prompt += " (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é)"
    prompt += ":\n(–ù–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
    update.message.reply_text(
        prompt,
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
        quote=False
    )
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {'GUIDE_ANSWER' if data_type == 'guide' else 'TEMPLATE_ANSWER'} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    return GUIDE_ANSWER if data_type == 'guide' else TEMPLATE_ANSWER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@restrict_access
def receive_answer(update: Update, context: CallbackContext):
    if not context.user_data.get('conversation_active', False) or 'new_question' not in context.user_data:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞")
        update.message.reply_text(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {'–ø—É–Ω–∫—Ç–∞' if context.user_data.get('data_type') == 'guide' else '—à–∞–±–ª–æ–Ω–∞'} –∑–∞–Ω–æ–≤–æ.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        context.user_data.clear()
        context.user_data['conversation_state'] = 'INVALID_ANSWER'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    data_type = context.user_data.get('data_type', 'guide')
    if data_type not in ['guide', 'template']:
        logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π data_type: {data_type}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        context.user_data.clear()
        context.user_data['conversation_state'] = 'INVALID_DATA_TYPE'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []
    if 'documents' not in context.user_data:
        context.user_data['documents'] = []
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    context.user_data['answer'] = update.message.caption if (update.message.photo or update.message.document) and update.message.caption else update.message.text if update.message.text and update.message.text != "–ì–æ—Ç–æ–≤–æ" else ""
    context.user_data['conversation_state'] = f'RECEIVE_{data_type.upper()}_ANSWER'
    if ENABLE_PHOTOS and (update.message.photo or update.message.document):
        if update.message.photo:
            context.user_data['photos'].append(update.message.photo[-1].file_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤ {data_type}: {context.user_data['photos'][-1]}")
        elif update.message.document:
            doc = update.message.document
            if doc.mime_type not in [
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/pdf',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ]:
                update.message.reply_text(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .doc, .docx, .pdf, .xls, .xlsx!",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            if doc.file_size > 20 * 1024 * 1024:
                update.message.reply_text(
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            context.user_data['documents'].append(doc.file_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç –≤ {data_type}: {doc.file_id}")
        update.message.reply_text(
            f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(context.user_data['photos']) + len(context.user_data['documents'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã, —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
            reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
            quote=False
        )
        return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if context.user_data.get('answer') or context.user_data.get('photos') or context.user_data.get('documents'):
        save_new_point(update, context, send_message=True)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–≤–µ—Ä—à–∏–ª add_{data_type}_conv –≤ receive_answer")
        context.user_data.clear()
        context.user_data['conversation_state'] = f'{data_type.upper()}_POINT_SAVED'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç
    update.message.reply_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç (.doc, .docx, .pdf, .xls, .xlsx) –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
        quote=False
    )
    return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∞–ª—å–±–æ–º–∞
def check_album_timeout(context: CallbackContext):
    update, context = context.job.context
    if context.user_data.get('last_photo_time') == update.message.date and not context.user_data.get('point_saved'):
        data_type = context.user_data.get('data_type', 'guide')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –∞–ª—å–±–æ–º –¥–ª—è {data_type} media group {context.user_data.get('media_group_id')}")
        if context.user_data.get('loading_message_id'):
            try:
                context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['loading_message_id']
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        save_new_point(update, context, send_message=True)
        context.user_data['point_saved'] = True
        context.user_data['timeout_task'] = None
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–≤–µ—Ä—à–∏–ª add_{data_type}_conv –≤ check_album_timeout")
        context.user_data.clear()
        context.user_data['conversation_state'] = f'{data_type.upper()}_ALBUM_SAVED'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    return None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞
@restrict_access
def save_new_point(update: Update, context: CallbackContext, send_message: bool = True):
    try:
        data_type = context.user_data.get('data_type', 'guide')
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        data = load_data(data_type)
        key = 'questions' if data_type == 'guide' else 'templates'
        new_id = max([q['id'] for q in data[key]], default=0) + 1
        new_point = {
            'id': new_id,
            'question': context.user_data.get('new_question', '–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'answer': context.user_data.get('answer', ''),
            'photos': context.user_data.get('photos', []),
            'documents': context.user_data.get('documents', [])
        }
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ—Ç–≤–µ—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if not (new_point['answer'] or new_point['photos'] or new_point['documents']):
            update.message.reply_text(
                "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –î–æ–±–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                quote=False
            )
            return
        data[key].append(new_point)
        with open(f'{data_type}.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –≤ {data_type} —Å ID {new_id}")
        try:
            sync_with_github(data_type)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub –¥–ª—è {data_type}: {str(e)}")
            update.message.reply_text(
                "‚ö†Ô∏è –ü—É–Ω–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=MAIN_MENU,
                quote=False
            )
            return
        if send_message:
            update.message.reply_text(
                f"‚úÖ –ü—É–Ω–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {new_id}!",
                reply_markup=MAIN_MENU,
                quote=False
            )
        context.user_data['point_saved'] = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ –≤ {data_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )


@restrict_access
def receive_answer_files(update: Update, context: CallbackContext):
    data_type = context.user_data.get('data_type', 'guide')
    user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
    try:
        if 'photos' not in context.user_data:
            context.user_data['photos'] = []
        if 'documents' not in context.user_data:
            context.user_data['documents'] = []
        if len(context.user_data['photos']) + len(context.user_data['documents']) >= 10:
            update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã) –Ω–∞ –ø—É–Ω–∫—Ç! –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã.",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                quote=False
            )
            save_new_point(update, context, send_message=True)
            context.user_data.clear()
            context.user_data['conversation_state'] = f'{data_type.upper()}_FILES_SAVED'
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        if update.message.photo:
            new_photos = [photo.file_id for photo in update.message.photo]
            context.user_data['photos'].extend(new_photos)
            update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ({len(context.user_data['photos'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã, —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                quote=False
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –¥–æ–±–∞–≤–∏–ª {len(new_photos)} —Ñ–æ—Ç–æ, –≤—Å–µ–≥–æ: {len(context.user_data['photos'])}")
        elif update.message.document:
            doc = update.message.document
            if doc.mime_type not in [
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/pdf',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ]:
                update.message.reply_text(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .doc, .docx, .pdf, .xls, .xlsx!",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            if doc.file_size > 20 * 1024 * 1024:  # 20 MB limit
                update.message.reply_text(
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            context.user_data['documents'].append(doc.file_id)
            update.message.reply_text(
                f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω ({len(context.user_data['documents'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã, —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                quote=False
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –¥–æ–±–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç {os.path.splitext(doc.file_name)[1].lower()}, –≤—Å–µ–≥–æ: {len(context.user_data['documents'])}")
        elif update.message.text == "–ì–æ—Ç–æ–≤–æ":
            if not (context.user_data.get('photos') or context.user_data.get('documents') or context.user_data.get('answer')):
                update.message.reply_text(
                    "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º!",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            save_new_point(update, context, send_message=True)
            context.user_data.clear()
            context.user_data['conversation_state'] = f'{data_type.upper()}_FILES_SAVED'
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (.doc, .docx, .pdf, .xls, .xlsx)!",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                quote=False
            )
        return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_answer_files –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@restrict_access
def receive_answer(update: Update, context: CallbackContext):
    if not context.user_data.get('conversation_active', False) or 'new_question' not in context.user_data:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞")
        update.message.reply_text(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {'–ø—É–Ω–∫—Ç–∞' if context.user_data.get('data_type') == 'guide' else '—à–∞–±–ª–æ–Ω–∞'} –∑–∞–Ω–æ–≤–æ.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        context.user_data.clear()
        context.user_data['conversation_state'] = 'INVALID_ANSWER'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    data_type = context.user_data.get('data_type', 'guide')
    if data_type not in ['guide', 'template']:
        logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π data_type: {data_type}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        context.user_data.clear()
        context.user_data['conversation_state'] = 'INVALID_DATA_TYPE'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []
    if 'documents' not in context.user_data:
        context.user_data['documents'] = []
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    context.user_data['answer'] = update.message.caption if (update.message.photo or update.message.document) and update.message.caption else update.message.text if update.message.text and update.message.text != "–ì–æ—Ç–æ–≤–æ" else ""
    context.user_data['conversation_state'] = f'RECEIVE_{data_type.upper()}_ANSWER'
    if ENABLE_PHOTOS and (update.message.photo or update.message.document):
        if update.message.photo:
            context.user_data['photos'].append(update.message.photo[-1].file_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤ {data_type}: {context.user_data['photos'][-1]}")
        elif update.message.document:
            doc = update.message.document
            if doc.mime_type not in [
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/pdf',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ]:
                update.message.reply_text(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .doc, .docx, .pdf, .xls, .xlsx!",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            if doc.file_size > 20 * 1024 * 1024:
                update.message.reply_text(
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                    quote=False
                )
                return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
            context.user_data['documents'].append(doc.file_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç –≤ {data_type}: {doc.file_id}")
        update.message.reply_text(
            f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(context.user_data['photos']) + len(context.user_data['documents'])}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã, —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
            reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
            quote=False
        )
        return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    if update.message.text == "–ì–æ—Ç–æ–≤–æ":
        if not (context.user_data.get('answer') or context.user_data.get('photos') or context.user_data.get('documents')):
            update.message.reply_text(
                "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º!",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
                quote=False
            )
            return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS
        save_new_point(update, context, send_message=True)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–≤–µ—Ä—à–∏–ª add_{data_type}_conv –≤ receive_answer")
        context.user_data.clear()
        context.user_data['conversation_state'] = f'{data_type.upper()}_POINT_SAVED'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
    if context.user_data.get('answer'):
        save_new_point(update, context, send_message=True)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–≤–µ—Ä—à–∏–ª add_{data_type}_conv –≤ receive_answer")
        context.user_data.clear()
        context.user_data['conversation_state'] = f'{data_type.upper()}_POINT_SAVED'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç
    update.message.reply_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç (.doc, .docx, .pdf, .xls, .xlsx) –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["/cancel"]], resize_keyboard=True),
        quote=False
    )
    return GUIDE_ANSWER_PHOTOS if data_type == 'guide' else TEMPLATE_ANSWER_PHOTOS

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
@restrict_access
def edit_point(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞")
    context.user_data.clear()
    context.user_data['conversation_state'] = 'EDIT_GUIDE'
    context.user_data['conversation_active'] = True
    context.user_data['data_type'] = 'guide'
    try:
        guide = load_guide()
        if not guide["questions"]:
            update.message.reply_text(
                "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚ûï",
                reply_markup=MAIN_MENU,
                quote=False
            )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        context.user_data['data'] = guide
        context.user_data['page'] = 0
        display_guide_edit_page(update, context, guide, 0)
        return GUIDE_EDIT_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_point –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        return ConversationHandler.END

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@restrict_access
def edit_template(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    context.user_data.clear()
    context.user_data['conversation_state'] = 'EDIT_TEMPLATE'
    context.user_data['conversation_active'] = True
    context.user_data['data_type'] = 'template'
    try:
        templates = load_templates()
        if not templates["templates"]:
            if update.message:
                update.message.reply_text(
                    "üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç—ã. –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚ûï",
                    reply_markup=MAIN_MENU,
                    quote=False
                )
            elif update.callback_query:
                update.callback_query.message.reply_text(
                    "üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç—ã. –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚ûï",
                    reply_markup=MAIN_MENU,
                    quote=False
                )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        context.user_data['data'] = templates
        context.user_data['page'] = 0
        display_template_edit_page(update, context, templates, 0)
        return TEMPLATE_EDIT_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_template –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        if update.message:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU,
                quote=False
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU,
                quote=False
            )
        return ConversationHandler.END

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
def display_guide_edit_page(update: Update, context: CallbackContext, data, page):
    try:
        ITEMS_PER_PAGE = 15
        total_items = len(data["questions"])
        total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        page = max(0, min(page, total_pages - 1))
        context.user_data['page'] = page
        context.user_data['data'] = data
        context.user_data['data_type'] = 'guide'

        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, total_items)
        items = data["questions"][start_idx:end_idx]

        keyboard = []
        for item in items:
            if not isinstance(item, dict) or "question" not in item or "id" not in item:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {item}")
                continue
            question_text = item["question"][:100] if len(item["question"]) > 100 else item["question"]
            callback_data = f'edit_guide_question_{item["id"]}'
            logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: callback_data={callback_data}, –≤–æ–ø—Ä–æ—Å={question_text}")
            keyboard.append([InlineKeyboardButton(f"üìÑ {question_text}", callback_data=callback_data)])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'edit_guide_page_{page-1}'))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f'edit_guide_page_{page+1}'))
        nav_buttons.append(InlineKeyboardButton("üö™ –û—Ç–º–µ–Ω–∞", callback_data='cancel_guide_edit'))
        keyboard.append(nav_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"
        if update.message:
            update.message.reply_text(text, reply_markup=reply_markup, quote=False)
        elif update.callback_query:
            update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {page + 1}")
        context.user_data['conversation_state'] = 'EDIT_GUIDE_PAGE'
        return GUIDE_EDIT_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ display_guide_edit_page –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        if update.message:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU,
                quote=False
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU,
                quote=False
            )
        return ConversationHandler.END

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
def display_template_edit_page(update: Update, context: CallbackContext, data, page):
    try:
        ITEMS_PER_PAGE = 15
        total_items = len(data["templates"])
        total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        page = max(0, min(page, total_pages - 1))
        context.user_data['page'] = page
        context.user_data['data'] = data
        context.user_data['data_type'] = 'template'

        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, total_items)
        items = data["templates"][start_idx:end_idx]

        keyboard = []
        for item in items:
            if not isinstance(item, dict) or "question" not in item or "id" not in item:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞: {item}")
                continue
            question_text = item["question"][:100] if len(item["question"]) > 100 else item["question"]
            callback_data = f'edit_template_question_{item["id"]}'
            logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: callback_data={callback_data}, –≤–æ–ø—Ä–æ—Å={question_text}")
            keyboard.append([InlineKeyboardButton(f"üìÑ {question_text}", callback_data=callback_data)])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'edit_template_page_{page-1}'))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f'edit_template_page_{page+1}'))
        nav_buttons.append(InlineKeyboardButton("üö™ –û—Ç–º–µ–Ω–∞", callback_data='cancel_template_edit'))
        keyboard.append(nav_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"
        if update.message:
            update.message.reply_text(text, reply_markup=reply_markup, quote=False)
        elif update.callback_query:
            update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ {page + 1}")
        context.user_data['conversation_state'] = 'EDIT_TEMPLATE_PAGE'
        return TEMPLATE_EDIT_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ display_template_edit_page –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        if update.message:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU,
                quote=False
            )
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=MAIN_MENU,
                quote=False
            )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@restrict_access
def handle_edit_pagination(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        data_type = query.data.split('_')[1]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤ handle_edit_pagination, callback_data: {query.data}")
        if query.data == f'cancel_{data_type}_edit':
            context.user_data.clear()
            context.user_data['conversation_state'] = f'CANCEL_{data_type.upper()}_EDIT'
            context.user_data['conversation_active'] = False
            query.message.reply_text(
                f"üö™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {'–ø—É–Ω–∫—Ç–∞' if data_type == 'guide' else '—à–∞–±–ª–æ–Ω–∞'} –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=MAIN_MENU,
                quote=False
            )
            return ConversationHandler.END
        page = int(query.data.split('_')[3])
        data = context.user_data.get('data', load_data(data_type))
        if data_type == 'guide':
            display_guide_edit_page(update, context, data, page)
            return GUIDE_EDIT_QUESTION
        else:
            display_template_edit_page(update, context, data, page)
            return TEMPLATE_EDIT_QUESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_pagination –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        return ConversationHandler.END

# –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@restrict_access
def select_edit_question(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–æ—à–µ–ª –≤ select_edit_question —Å callback_data: {query.data}")
        data_type = query.data.split('_')[1]
        question_id = int(query.data.split('_')[3])
        context.user_data['edit_question_id'] = question_id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {data_type} ID {question_id}")
        context.user_data['conversation_state'] = f'SELECT_EDIT_{data_type.upper()}_QUESTION'
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f'edit_{data_type}_field_question')],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f'edit_{data_type}_field_answer')],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data=f'edit_{data_type}_field_delete')],
        ]
        if ENABLE_PHOTOS:
            keyboard.insert(2, [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f'edit_{data_type}_field_photo')])
        keyboard.append([InlineKeyboardButton("üö™ –û—Ç–º–µ–Ω–∞", callback_data=f'cancel_{data_type}_edit')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.edit_text(
            f"‚úèÔ∏è –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ {'–≤–æ–ø—Ä–æ—Å–µ' if data_type == 'guide' else '—à–∞–±–ª–æ–Ω–µ'}?",
            reply_markup=reply_markup
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {'GUIDE_EDIT_FIELD' if data_type == 'guide' else 'TEMPLATE_EDIT_FIELD'}")
        return GUIDE_EDIT_FIELD if data_type == 'guide' else TEMPLATE_EDIT_FIELD
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_edit_question –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@restrict_access
def receive_edit_field(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        data_type = query.data.split('_')[1]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–æ—à–µ–ª –≤ receive_edit_field —Å callback_data: {query.data}")
        if query.data == f'cancel_{data_type}_edit':
            context.user_data.clear()
            context.user_data['conversation_state'] = f'CANCEL_{data_type.upper()}_EDIT'
            context.user_data['conversation_active'] = False
            query.message.reply_text(
                f"üö™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {'–ø—É–Ω–∫—Ç–∞' if data_type == 'guide' else '—à–∞–±–ª–æ–Ω–∞'} –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=MAIN_MENU,
                quote=False
            )
            return ConversationHandler.END
        context.user_data['edit_field'] = query.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {data_type}: {query.data}")
        context.user_data['conversation_state'] = f'RECEIVE_{data_type.upper()}_EDIT_FIELD'
        if query.data == f'edit_{data_type}_field_delete':
            data = load_data(data_type)
            key = 'questions' if data_type == 'guide' else 'templates'
            question_id = context.user_data['edit_question_id']
            data[key] = [q for q in data[key] if q["id"] != question_id]
            save_data(data_type, data)
            context.user_data.clear()
            context.user_data['conversation_state'] = f'{data_type.upper()}_POINT_DELETED'
            context.user_data['conversation_active'] = False
            query.message.reply_text(
                f"üóëÔ∏è {'–ü—É–Ω–∫—Ç' if data_type == 'guide' else '–®–∞–±–ª–æ–Ω'} —É–¥–∞–ª—ë–Ω!",
                reply_markup=MAIN_MENU,
                quote=False
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É–¥–∞–ª–∏–ª {data_type} ID {question_id}")
            return ConversationHandler.END
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        field = "–≤–æ–ø—Ä–æ—Å" if query.data == f'edit_{data_type}_field_question' else "–æ—Ç–≤–µ—Ç" if query.data == f'edit_{data_type}_field_answer' else "—Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º"
        data = load_data(data_type)
        key = 'questions' if data_type == 'guide' else 'templates'
        question_id = context.user_data['edit_question_id']
        item = next((q for q in data[key] if q["id"] == question_id), None)
        if not item:
            query.message.reply_text(
                "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=MAIN_MENU,
                quote=False
            )
            context.user_data.clear()
            context.user_data['conversation_state'] = 'ERROR'
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        current_value = ""
        if query.data == f'edit_{data_type}_field_question':
            current_value = f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {item['question']}\n"
        elif query.data == f'edit_{data_type}_field_answer':
            current_value = f"–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: {item.get('answer', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
        elif query.data == f'edit_{data_type}_field_photo':
            current_value = f"–¢–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ: {len(item.get('photos', []))} —à—Ç.\n"
        prompt = f"{current_value}‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π {field}:\n(–ù–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
        query.message.reply_text(
            prompt,
            reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
            quote=False
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {'GUIDE_EDIT_VALUE' if data_type == 'guide' else 'TEMPLATE_EDIT_VALUE'}")
        return GUIDE_EDIT_VALUE if data_type == 'guide' else TEMPLATE_EDIT_VALUE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_edit_field –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@restrict_access
def receive_edit_value(update: Update, context: CallbackContext):
    data_type = context.user_data.get('data_type', 'guide')
    try:
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        edit_field = context.user_data['edit_field']
        field = "–≤–æ–ø—Ä–æ—Å" if edit_field == f'edit_{data_type}_field_question' else "–æ—Ç–≤–µ—Ç" if edit_field == f'edit_{data_type}_field_answer' else "—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã"
        data = load_data(data_type)
        key = 'questions' if data_type == 'guide' else 'templates'
        question_id = context.user_data['edit_question_id']
        item = next((q for q in data[key] if q["id"] == question_id), None)
        if not item:
            update.message.reply_text(
                "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=MAIN_MENU,
                quote=False
            )
            context.user_data.clear()
            context.user_data['conversation_state'] = 'ERROR'
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        if edit_field == f'edit_{data_type}_field_question':
            item['question'] = update.message.text
        elif edit_field == f'edit_{data_type}_field_answer':
            item['answer'] = update.message.text
        elif edit_field == f'edit_{data_type}_field_photo':
            if update.message.photo:
                item['photos'] = [photo.file_id for photo in update.message.photo]
                item['documents'] = []
            elif update.message.document:
                doc = update.message.document
                if doc.mime_type not in [
                    'application/msword',
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    'application/pdf',
                    'application/vnd.ms-excel',
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                ]:
                    update.message.reply_text(
                        "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .doc, .docx, .pdf, .xls, .xlsx!",
                        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
                        quote=False
                    )
                    return GUIDE_EDIT_VALUE if data_type == 'guide' else TEMPLATE_EDIT_VALUE
                if doc.file_size > 20 * 1024 * 1024:
                    update.message.reply_text(
                        "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.",
                        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
                        quote=False
                    )
                    return GUIDE_EDIT_VALUE if data_type == 'guide' else TEMPLATE_EDIT_VALUE
                item['photos'] = []
                item['documents'] = [doc.file_id]
        save_data(data_type, data)
        update.message.reply_text(
            f"‚úÖ {field.capitalize()} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!",
            reply_markup=MAIN_MENU,
            quote=False
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –∏–∑–º–µ–Ω–∏–ª {field} –¥–ª—è {data_type} ID {question_id}")
        context.user_data.clear()
        context.user_data['conversation_state'] = f'{data_type.upper()}_EDITED'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_edit_value –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {str(e)}", exc_info=True)
        context.user_data.clear()
        context.user_data['conversation_state'] = 'ERROR'
        context.user_data['conversation_active'] = False
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
            quote=False
        )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@restrict_access
def handle_invalid_input(update: Update, context: CallbackContext):
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {context.user_data.get('conversation_state')}")
    data_type = context.user_data.get('data_type', 'guide')
    context.user_data.clear()
    context.user_data['conversation_state'] = 'INVALID_INPUT'
    context.user_data['conversation_active'] = False
    update.message.reply_text(
        f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º (–¥–ª—è –æ—Ç–≤–µ—Ç–∞/—Ñ–æ—Ç–æ)!\n(–ù–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
        reply_markup=MAIN_MENU,
        quote=False
    )
    return ConversationHandler.END

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    load_dotenv()
    logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª .env")
    updater = Updater(os.getenv("BOT_TOKEN"), use_context=True)
    dp = updater.dispatcher
    dp.add_error_handler(error_handler)

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
    guide_add_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç$'), add_point)],
        states={
            GUIDE_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, receive_question),
                CommandHandler("cancel", cancel),
            ],
            GUIDE_ANSWER: [
                MessageHandler(Filters.text & ~Filters.command, receive_answer),
                MessageHandler(Filters.photo | Filters.document, receive_answer) if ENABLE_PHOTOS else None,
                MessageHandler(~(Filters.text | Filters.photo | Filters.document) & ~Filters.command, handle_invalid_input),
            ],
            GUIDE_ANSWER_PHOTOS: [
                MessageHandler(Filters.photo | Filters.document | Filters.regex(r'^–ì–æ—Ç–æ–≤–æ$'), receive_answer_files) if ENABLE_PHOTOS else None,
                MessageHandler(Filters.text & ~Filters.command & ~Filters.regex(r'^–ì–æ—Ç–æ–≤–æ$'), receive_answer),
                MessageHandler(~(Filters.text | Filters.photo | Filters.document) & ~Filters.command, handle_invalid_input),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
        allow_reentry=False,
    )

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
    template_add_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_template, pattern='^add_template$')],
        states={
            TEMPLATE_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, receive_question),
                CommandHandler("cancel", cancel),
            ],
            TEMPLATE_ANSWER: [
                MessageHandler(Filters.text & ~Filters.command, receive_answer),
                MessageHandler(Filters.photo | Filters.document, receive_answer) if ENABLE_PHOTOS else None,
                MessageHandler(~(Filters.text | Filters.photo | Filters.document) & ~Filters.command, handle_invalid_input),
            ],
            TEMPLATE_ANSWER_PHOTOS: [
                MessageHandler(Filters.photo | Filters.document | Filters.regex(r'^–ì–æ—Ç–æ–≤–æ$'), receive_answer_files) if ENABLE_PHOTOS else None,
                MessageHandler(Filters.text & ~Filters.command & ~Filters.regex(r'^–ì–æ—Ç–æ–≤–æ$'), receive_answer),
                MessageHandler(~(Filters.text | Filters.photo | Filters.document) & ~Filters.command, handle_invalid_input),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
        allow_reentry=False,
    )

    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    guide_edit_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r'^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç$'), edit_point)],
        states={
            GUIDE_EDIT_QUESTION: [
                CallbackQueryHandler(select_edit_question, pattern=r'^edit_guide_question_\d+$'),
                CallbackQueryHandler(handle_edit_pagination, pattern=r'^(edit_guide_page_\d+|cancel_guide_edit)$'),
            ],
            GUIDE_EDIT_FIELD: [
                CallbackQueryHandler(receive_edit_field, pattern=r'^(edit_guide_field_(question|answer|photo|delete)|cancel_guide_edit)$'),
            ],
            GUIDE_EDIT_VALUE: [
                MessageHandler(Filters.text & ~Filters.command, receive_edit_value),
                MessageHandler(Filters.photo | Filters.document, receive_edit_value) if ENABLE_PHOTOS else None,
                MessageHandler(~(Filters.text | Filters.photo | Filters.document) & ~Filters.command, handle_invalid_input),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
        per_message=False,
        allow_reentry=False,
    )

    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
    template_edit_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_template, pattern='^edit_template$')],
        states={
            TEMPLATE_EDIT_QUESTION: [
                CallbackQueryHandler(select_edit_question, pattern=r'^edit_template_question_\d+$'),
                CallbackQueryHandler(handle_edit_pagination, pattern=r'^(edit_template_page_\d+|cancel_template_edit)$'),
            ],
            TEMPLATE_EDIT_FIELD: [
                CallbackQueryHandler(receive_edit_field, pattern=r'^(edit_template_field_(question|answer|photo|delete)|cancel_template_edit)$'),
            ],
            TEMPLATE_EDIT_VALUE: [
                MessageHandler(Filters.text & ~Filters.command, receive_edit_value),
                MessageHandler(Filters.photo | Filters.document, receive_edit_value) if ENABLE_PHOTOS else None,
                MessageHandler(~(Filters.text | Filters.photo | Filters.document) & ~Filters.command, handle_invalid_input),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
        per_message=False,
        allow_reentry=False,
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler'–æ–≤
    dp.add_handler(guide_add_conv)
    dp.add_handler(template_add_conv)
    dp.add_handler(guide_edit_conv)
    dp.add_handler(template_edit_conv)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("cancel", cancel))
    dp.add_handler(CommandHandler("search", lambda update, context: update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True)
    )))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
    dp.add_handler(MessageHandler(Filters.regex(r'^üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫$'), open_guide))
    dp.add_handler(MessageHandler(Filters.regex(r'^üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤$'), open_templates))
    dp.add_handler(MessageHandler(Filters.regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç$'), add_point))
    dp.add_handler(MessageHandler(Filters.regex(r'^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç$'), edit_point))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.add_handler(CallbackQueryHandler(handle_pagination, pattern=r'^(guide|template)_page_\d+$'))
    dp.add_handler(CallbackQueryHandler(show_answer, pattern=r'^(guide|template)_question_\d+$'))
    dp.add_handler(CallbackQueryHandler(handle_template_action, pattern='^(add_template|edit_template|cancel_template)$'))
    dp.add_handler(CallbackQueryHandler(delete_answer, pattern=r'^delete_\d+$|^delete_[\d,]+$'))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∏—Å–∫–∞
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command & ~Filters.regex(r'^(üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫|üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤|‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç|‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç)$'),
        perform_search
    ))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling(allowed_updates=Update.ALL_TYPES)
    updater.idle()

# –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
def clear_chat(context: CallbackContext, chat_id: int, message_id: int, user_display: str):
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞ {chat_id}")
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 50
        deleted_count = 0
        for i in range(message_id - 1, max(message_id - 50, 1), -1):
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=i)
                deleted_count += 1
                # –ó–∞–¥–µ—Ä–∂–∫–∞ 0.2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram API
                asyncio.run(asyncio.sleep(0.2))
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i} –≤ —á–∞—Ç–µ {chat_id}: {e}")
                continue
        logger.info(f"–ß–∞—Ç {chat_id} –æ—á–∏—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_display} –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞ {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {e}", exc_info=True)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def schedule_message_deletion(context: CallbackContext):
    try:
        job_data = context.job.context
        chat_id = job_data['chat_id']
        message_ids = job_data['message_ids']
        user_display = job_data['user_display']
        for message_id in message_ids:
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@restrict_access
def delete_answer(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        chat_id = query.message.chat_id
        user_display = context.user_data.get('user_display', f"ID {update.effective_user.id}")
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        message_ids = context.user_data.get('answer_message_ids', [query.message.message_id])
        for message_id in message_ids:
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        context.user_data.clear()
        context.user_data['conversation_state'] = 'DELETE_ANSWER'
        context.user_data['conversation_active'] = False
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {e}", exc_info=True)
        query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU
        )
        return ConversationHandler.END

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)